const ${constName} = {
    onConnect: function(jsn) {
        $SD.on('com.mosadie.effectmc.${lowercase}.willAppear', (jsonObj) => ${constName}.onWillAppear(jsonObj));
        $SD.on('com.mosadie.effectmc.${lowercase}.keyUp', (jsonObj) => ${constName}.onKeyUp(jsonObj));
        $SD.on('com.mosadie.effectmc.${lowercase}.didReceiveSettings', (jsonObj) => ${constName}.onDidReceiveSettings(jsonObj));
        $SD.on('com.mosadie.effectmc.${lowercase}.propertyInspectorDidAppear', (jsonObj) => {
           console.log('%c%s', 'color: white; background: black; font-size: 13px;', '[app.js]propertyInspectorDidAppear:');
        });
        $SD.on('com.mosadie.effectmc.${lowercase}.propertyInspectorDidDisappear', (jsonObj) => {
            console.log('%c%s', 'color: white; background: red; font-size: 13px;', '[app.js]propertyInspectorDidDisappear:');
        });
    },

    settings:{},
    onDidReceiveSettings: function(jsn) {
        this.settings = Utils.getProp(jsn, 'payload.settings', {});
    },

    onWillAppear: function (jsn) {
        this.settings = jsn.payload.settings;

        // If no settings, fill in some default settings.
        if (!this.settings || Object.keys(this.settings).length === 0) {
           this.settings.minecraftip = 'http://localhost:3000';
           ${settingsDefaults}
        }
    },

    onKeyUp: function (jsn) {
        if (!jsn.payload.settings) {
            $SD.api.showAlert(jsn.context);
            console.log("No settings!");
            return;
        }

        if (!jsn.payload.settings || !jsn.payload.settings.minecraftip || jsn.payload.settings.minecraftip == '' || jsn.payload.settings.minecraftip == ' ') {
            $SD.api.showAlert(jsn.context);
            console.log('No Minecraft IP!');
            return;
        }

        ${settingsIfCheck}

        var url = new URL('/${slug}', jsn.payload.settings.minecraftip);

        url.searchParams.set('device', jsn.device);

        ${setParams}

        ${sendRequest}
    },

    saveSettings: function (jsn, sdpi_collection) {
            console.log('saveSettings:', jsn);
            if (sdpi_collection.hasOwnProperty('key') && sdpi_collection.key != '') {
                if (sdpi_collection.value && sdpi_collection.value !== undefined) {
                    this.settings[sdpi_collection.key] = sdpi_collection.value;
                    console.log('setSettings....', this.settings);
                    $SD.api.setSettings(jsn.context, this.settings);
                }
            }
        },
}
